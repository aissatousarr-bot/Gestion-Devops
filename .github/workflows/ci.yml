name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # 📌 1. Build et Tests
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root  # Mot de passe pour l'utilisateur root
          MYSQL_DATABASE: school_management
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --host=localhost --user=root --password=root" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup PHP & Install Dependencies
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, bcmath
          tools: composer

      - name: 📦 Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: 🔑 Set Up Environment File
        run: |
          cp .env.example .env
          cp .env .env.testing
          php artisan key:generate --env=testing
          php artisan config:clear
          php artisan config:cache

      - name: 🛠 Run Migrations
        run: php artisan migrate --env=testing --force

      - name: 🧪 Run Unit Tests
        run: php artisan test --env=testing

      - name: ✅ Run PHPStan (Static Analysis)
        run: vendor/bin/phpstan analyse --memory-limit=1G

      - name: 🎨 Run Laravel Pint (Code Formatting)
        run: vendor/bin/pint --test

  # 📌 2. Build et Push Docker (pour tous les environnements)
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Build Docker Image
        run: docker build -t monprojet/laravel-microservice .

      - name: 🔑 Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚀 Push Docker Image
        run: |
          docker tag monprojet/laravel-microservice monrepo/laravel-microservice:${{ github.sha }}
          docker push monrepo/laravel-microservice:${{ github.sha }}

  # 📌 3. Déploiement sur Docker pour Dev
  deploy-dev:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Deploy to Docker (Dev)
        run: |
          docker pull monrepo/laravel-microservice:${{ github.sha }}
          docker run -d --name laravel-dev -p 8000:80 monrepo/laravel-microservice:${{ github.sha }}

  # 📌 4. Déploiement sur Kubernetes pour Staging
  deploy-staging:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Deploy to Kubernetes (Staging)
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/laravel-microservice

  # 📌 5. Déploiement sur le cloud pour Préprod & Prod
  deploy-preprod-prod:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 🚀 Deploy to Cloud Server
        run: |
          ssh ubuntu@${{ secrets.CLOUD_SERVER_IP }} << EOF
            docker pull monrepo/laravel-microservice:${{ github.sha }}
            docker stop laravel-prod || true
            docker rm laravel-prod || true
            docker run -d --name laravel-prod -p 80:80 monrepo/laravel-microservice:${{ github.sha }}
          EOF

  # 📌 6. Monitoring (Ajout d'une plateforme maison pour Prod)
  monitoring:
    needs: deploy-preprod-prod
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Setup Monitoring (CPU, RAM, Disk, Requests, Logs)
        run: |
          echo "Collecting metrics..."
          echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%" > monitoring.log
          echo "Memory Usage: $(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')" >> monitoring.log
          echo "Disk Usage: $(df -h | awk '$NF=="/"{printf "%s", $5}')" >> monitoring.log
          echo "Requests per Hour: $(cat /var/log/nginx/access.log | wc -l)" >> monitoring.log
          cat monitoring.log
